{"version":3,"sources":["utils/theme/create-theme.js","utils/theme/overrides/Button/index.js","App.js","utils/api.js","serviceWorker.js","index.js","components/Card/index.jsx","components/Header/index.jsx","components/Footer/index.jsx","components/Loader/index.jsx","components/Country-Picker/index.jsx","utils/get-array-comparer.js"],"names":["APP_THEME","createMuiTheme","palette","primary","main","contrastText","secondary","overrides","MuiButton","root","border","height","minWidth","padding","boxShadow","text","backgroundColor","color","textPrimary","textSecondary","outlined","contained","containedPrimary","containedSecondary","countries","registerLocale","EnglishTranslation","GlobalDashboard","React","lazy","CountryView","GLOBAL_DASHBOARD_SWR_CONFIG","refreshInterval","fetcher","endpoint","args","axios","get","then","response","data","suspense","COUNTRY_INFO_SWR_CONFIG","App","useState","theme","setTheme","containerClassnames","classNames","ThemeProvider","className","onThemeChange","isDark","fallback","exact","path","to","pathname","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","Card","header","subheader","children","renderCount","renderList","Header","activeClassName","htmlFor","type","id","onChange","e","target","checked","Footer","currentDate","Date","getFullYear","Loader","items","Array","fill","map","_","index","key","countriesAlphaComparer","getAlphaComparer","accessor","a","name","CustomTetxField","withStyles","borderColor","TextField","CountryPicker","memo","selected","onSelect","sortedCountries","useMemo","slice","sort","Autocomplete","c","options","style","autoHighlight","blurOnSelect","getOptionLabel","o","renderOption","Fragment","iso2","renderInput","params","label","variant","inputProps","autoComplete","getNumericComparer","desc","b","locales","localeCompare"],"mappings":"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","file":"static/js/main.e94087d3.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nimport { MUI_BUTTON_OVERRIDES } from './overrides';\n\nexport const APP_THEME = createMuiTheme({\n\tpalette: {\n\t\tprimary: {\n\t\t\tmain: 'rgb(var(--mui-primary-rgb))',\n\t\t\tcontrastText: 'rgb(var(--mui-on-primary-rgb))',\n\t\t},\n\t\tsecondary: {\n\t\t\tmain: 'rgb(var(--mui-secondary-rgb))',\n\t\t\tcontrastText: 'rgb(var(--mui-on-secondary-rgb))',\n\t\t},\n\t},\n\toverrides: {\n\t\tMuiButton: MUI_BUTTON_OVERRIDES,\n\t},\n});\n","export const MUI_BUTTON_OVERRIDES = {\n\troot: {\n\t\tborder: 0,\n\t\theight: 40,\n\t\tminWidth: 64,\n\t\tpadding: '8px 12px',\n\t\tboxShadow: 'var(--covid-btn-box-shadow)',\n\t},\n\ttext: {\n\t\tbackgroundColor: 'var(--covid-primary)',\n\t\tcolor: 'var(--covid-on-primary)',\n\t\t'&:hover': {\n\t\t\tcolor: 'var(--covid-primary)',\n\t\t\tbackgroundColor: 'var(--covid-on-primary)',\n\t\t\tborder: '1px solid var(--covid-primary)',\n\t\t},\n\t},\n\ttextPrimary: {\n\t\tbackgroundColor: 'var(--covid-primary)',\n\t\tcolor: 'var(--covid-on-primary)',\n\t\t'&:hover': {\n\t\t\tcolor: 'var(--covid-primary)',\n\t\t\tbackgroundColor: 'var(--covid-on-primary)',\n\t\t\tborder: '1px solid var(--covid-primary)',\n\t\t},\n\t},\n\ttextSecondary: {\n\t\tbackgroundColor: 'var(--covid-secondary)',\n\t\tcolor: 'var(--covid-on-secondary)',\n\t\t'&:hover': {\n\t\t\tcolor: 'var(--covid-secondary)',\n\t\t\tbackgroundColor: 'var(--covid-on-secondary)',\n\t\t\tborder: '1px solid var(--covid-secondary)',\n\t\t},\n\t},\n\toutlined: {\n\t\tcolor: 'var(--covid-primary)',\n\t},\n\tcontained: {\n\t\tbackgroundColor: 'var(--covid-primary)',\n\t\tcolor: 'var(--covid-on-primary)',\n\t\t'&:hover': {\n\t\t\tcolor: 'var(--covid-primary)',\n\t\t\tbackgroundColor: 'var(--covid-on-primary)',\n\t\t\tborder: '1px solid var(--covid-primary)',\n\t\t},\n\t},\n\tcontainedPrimary: {\n\t\t'&:hover': {\n\t\t\tcolor: 'var(--covid-primary)',\n\t\t\tbackgroundColor: 'var(--covid-on-primary)',\n\t\t\tborder: '1px solid var(--covid-primary)',\n\t\t},\n\t},\n\tcontainedSecondary: {\n\t\t'&:hover': {\n\t\t\tcolor: 'var(--covid-secondary)',\n\t\t\tbackgroundColor: 'var(--covid-on-secondary)',\n\t\t\tborder: '1px solid var(--covid-secondary)',\n\t\t},\n\t},\n};\n","import React, { useState, Suspense } from 'react';\nimport classNames from 'classnames';\nimport { SWRConfig } from 'swr';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport countries from 'i18n-iso-countries';\nimport EnglishTranslation from 'i18n-iso-countries/langs/en.json';\n\nimport { Header, Footer, Loader } from './components';\nimport { swrDashboardFetcher, swrCountryInfoFetcher } from './utils/api';\nimport { APP_THEME } from './utils/theme/create-theme';\n\nimport './App.scss';\n\ncountries.registerLocale(EnglishTranslation);\n\nconst GlobalDashboard = React.lazy(() => import('./pages/GlobalDashboard'));\n\nconst CountryView = React.lazy(() => import('./pages/CountryView'));\n\nconst GLOBAL_DASHBOARD_SWR_CONFIG = {\n\trefreshInterval: 1000 * 30, // 30 sec\n\tfetcher: swrDashboardFetcher,\n\tsuspense: true,\n};\n\nconst COUNTRY_INFO_SWR_CONFIG = {\n\trefreshInterval: 1000 * 60, // 60 sec\n\tfetcher: swrCountryInfoFetcher,\n\tsuspense: true,\n};\n\nfunction App() {\n\tconst [theme, setTheme] = useState('light');\n\n\tconst changeTheme = (isDark) => {\n\t\tconst nextTheme = isDark ? 'dark' : 'light';\n\t\tsetTheme(nextTheme);\n\t};\n\n\tconst containerClassnames = classNames(\n\t\t`covid-${theme}-theme`,\n\t\t'bg-body',\n\t\t'font-body',\n\t\t'h-screen',\n\t\t'grid',\n\t\t'grid-rows-main-layout'\n\t);\n\n\treturn (\n\t\t<ThemeProvider theme={APP_THEME}>\n\t\t\t<Router>\n\t\t\t\t<div className={containerClassnames}>\n\t\t\t\t\t<Header onThemeChange={changeTheme} />\n\t\t\t\t\t<Suspense fallback={<Loader />}>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t\t\t<Redirect to={{ pathname: '/dashboard' }} />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/dashboard\">\n\t\t\t\t\t\t\t\t<SWRConfig value={GLOBAL_DASHBOARD_SWR_CONFIG}>\n\t\t\t\t\t\t\t\t\t<GlobalDashboard />\n\t\t\t\t\t\t\t\t</SWRConfig>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/countries\">\n\t\t\t\t\t\t\t\t<SWRConfig value={COUNTRY_INFO_SWR_CONFIG}>\n\t\t\t\t\t\t\t\t\t<CountryView />\n\t\t\t\t\t\t\t\t</SWRConfig>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"*\">\n\t\t\t\t\t\t\t\t<h3>Not Found!</h3>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Suspense>\n\n\t\t\t\t\t<Footer />\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","import axios from 'axios';\n\nexport const DASHBOARD_API_BASE_URL = 'https://coronavirus-19-api.herokuapp.com';\nexport const swrDashboardFetcher = (endpoint, ...args) =>\n\taxios.get(`${DASHBOARD_API_BASE_URL}/${endpoint}`, ...args).then((response) => response.data);\n\nexport const COUNTRY_INFO_API_BASE_URL = 'https://covid19.mathdro.id';\nexport const swrCountryInfoFetcher = (endpoint, ...args) =>\n\taxios.get(`${COUNTRY_INFO_API_BASE_URL}/${endpoint}`, ...args).then((response) => response.data);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.generated.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nexport const Card = ({ header, subheader, children }) => {\n\tconst { renderCount, renderList } = children;\n\treturn (\n\t\t<div className=\"bg-card shadow-2xl text-center p-4 rounded-lg\">\n\t\t\t<h3 className=\"text-3xl text-on-card opacity-80\">{header}</h3>\n\t\t\t<h3 className=\"text-2xl text-on-card font-bold mb-2\">{subheader}</h3>\n\t\t\t{renderCount()}\n\t\t\t{renderList()}\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport { NavLink, Link } from 'react-router-dom';\n\nimport './Header.scss';\n\nexport const Header = ({ onThemeChange }) => {\n\treturn (\n\t\t<header className=\"app-header bg-header h-16 w-full px-20 border-b-2 border-on-primary flex flex-row items-center\">\n\t\t\t<Link to=\"/\" className=\"text-xl sm:text-1xl md:text-2xl lg:text-3xl text-on-header mr-10\">\n\t\t\t\tCOVID-19\n\t\t\t</Link>\n\n\t\t\t<div className=\"flex align-middle ml-4\">\n\t\t\t\t<NavLink to=\"/dashboard\" activeClassName=\"active\">\n\t\t\t\t\tDashboard\n\t\t\t\t</NavLink>\n\n\t\t\t\t<NavLink to=\"/countries\" activeClassName=\"active\">\n\t\t\t\t\tCountries\n\t\t\t\t</NavLink>\n\t\t\t</div>\n\n\t\t\t<div className=\"flex items-center ml-auto\">\n\t\t\t\t<label className=\"inline-block relative h-8 w-16 font-bold\" htmlFor=\"checkbox\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tid=\"checkbox\"\n\t\t\t\t\t\tclassName=\"themeSwitchCheckbox hidden\"\n\t\t\t\t\t\tonChange={(e) => onThemeChange(e.target.checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"themeSwitchSlider bg-white inset-0 cursor-pointer absolute rounded-full transition-500\"></div>\n\t\t\t\t</label>\n\t\t\t\t<em className=\"ml-5 text-base text-on-header\">Enable Dark Mode</em>\n\t\t\t</div>\n\t\t</header>\n\t);\n};\n","import React from 'react';\n\nexport const Footer = () => {\n\tconst currentDate = new Date();\n\treturn (\n\t\t<footer className=\"bg-footer shadow-inner p-4 text-center font-semibold\">\n\t\t\t<p className=\"text-base text-on-footer\">Powered by Vyacheslav Borovsky, {currentDate.getFullYear()}</p>\n\t\t</footer>\n\t);\n};\n","import React from 'react';\n\nimport './Loader.scss';\n\nexport const Loader = ({ items = 12 }) => {\n\treturn (\n\t\t<div className=\"loadio-spinner-container\">\n\t\t\t<div className=\"loadio-spinner\">\n\t\t\t\t{new Array(items).fill(0).map((_, index) => (\n\t\t\t\t\t<div className=\"bg-primary\" key={index}></div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import React, { useMemo } from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nimport { getAlphaComparer } from '../../utils/get-array-comparer';\nimport { withStyles } from '@material-ui/core';\n\nconst countriesAlphaComparer = getAlphaComparer({ accessor: (a) => a.name });\n\nconst CustomTetxField = withStyles({\n\troot: {\n\t\t'& label': {\n\t\t\tcolor: 'var(--covid-default)',\n\t\t},\n\t\t'& .MuiOutlinedInput-root': {\n\t\t\t'& fieldset': {\n\t\t\t\tborderColor: 'var(--covid-default)',\n\t\t\t},\n\t\t\t'&:hover fieldset': {\n\t\t\t\tborderColor: 'var(--covid-primary)',\n\t\t\t},\n\t\t\t'& .MuiOutlinedInput-input': {\n\t\t\t\tcolor: 'var(--covid-default)',\n\t\t\t},\n\n\t\t\t'& .MuiIconButton-root': {\n\t\t\t\tcolor: 'var(--covid-default)',\n\n\t\t\t\t'&:hover': {\n\t\t\t\t\tbackgroundColor: 'var(--mui-icon-hover)',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})(TextField);\n\nexport const CountryPicker = React.memo(({ countries, selected, onSelect }) => {\n\tconst sortedCountries = useMemo(() => (countries || []).slice().sort(countriesAlphaComparer), [countries]);\n\n\treturn (\n\t\t<Autocomplete\n\t\t\tvalue={selected}\n\t\t\tonChange={(_, c) => onSelect(c)}\n\t\t\toptions={sortedCountries}\n\t\t\tstyle={{ minWidth: 300 }}\n\t\t\tautoHighlight\n\t\t\tblurOnSelect={true}\n\t\t\tgetOptionLabel={(o) => o.name}\n\t\t\trenderOption={(o) => (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<span className=\"mr-2\">{o.iso2}</span>\n\t\t\t\t\t<span className=\"text-info\">{o.name}</span>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t\trenderInput={(params) => (\n\t\t\t\t<CustomTetxField\n\t\t\t\t\t{...params}\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tlabel=\"Select a country\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t...params.inputProps,\n\t\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t/>\n\t);\n});\n","export const getNumericComparer = ({ accessor = (a) => a, desc = true } = {}) => {\n\treturn (a, b) => {\n\t\tif (desc) {\n\t\t\treturn accessor(b) - accessor(a);\n\t\t}\n\n\t\treturn accessor(a) - accessor(b);\n\t};\n};\n\nexport const getAlphaComparer = ({ accessor = (a) => a, locales, ...options } = {}) => {\n\treturn (a, b) => accessor(a).localeCompare(accessor(b), locales, options);\n};\n"],"sourceRoot":""}