{"version":3,"sources":["utils/custom-hooks/use-query.js","../node_modules/classnames/index.js","pages/CountryView/styles.module.scss","pages/CountryView/index.jsx"],"names":["useQuery","search","useLocation","URLSearchParams","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","CountryView","query","useState","selectedCountry","setSelectedCountry","requestedCountry","setRequestedCountry","useSWR","getCountires","countriesList","data","countriesListError","error","useEffect","nextRequestedCountry","get","countryFromUrl","find","iso3","renderError","className","styles","CountryViewContainer","CountryViewGrid","countries","selected","onSelect","country","countryIso3Code"],"mappings":";qNAEaA,EAAW,WAAO,IACtBC,EAAWC,cAAXD,OACR,OAAO,IAAIE,gBAAgBF,K,oBCJ5B,OAOC,WACA,aAEA,IAAIG,EAAS,GAAGC,eAEhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BL,EAAQM,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IAAQA,EAAID,OAAQ,CAC5C,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAC/BK,GACHT,EAAQM,KAAKG,QAER,GAAgB,WAAZJ,EACV,IAAK,IAAIM,KAAOP,EACXP,EAAOe,KAAKR,EAAKO,IAAQP,EAAIO,IAChCX,EAAQM,KAAKK,IAMjB,OAAOX,EAAQa,KAAK,KAGgBC,EAAOC,SAC3ChB,EAAWiB,QAAUjB,EACrBe,EAAOC,QAAUhB,QAGX,kBACL,OAAOA,GADF,QAAe,OAAf,aAtCP,I,oBCNDe,EAAOC,QAAU,CAAC,gBAAkB,kC,qLCQvBE,EAAc,WAC1B,IAAMC,EAAQzB,cADkB,EAGc0B,mBAAS,MAHvB,mBAGzBC,EAHyB,KAGRC,EAHQ,OAIgBF,mBAAS,MAJzB,mBAIzBG,EAJyB,KAIPC,EAJO,OAM2BC,YAAO,aAAcC,KAAlEC,EANkB,EAMxBC,KAA4BC,EANJ,EAMHC,MAE7BC,qBAAU,WACT,IAAMC,EAAuBb,EAAMc,IAAI,QACvC,GAAIN,GAAiBJ,IAAqBS,EAAsB,CAC/DR,EAAoBQ,GAEpB,IAAME,EAAiBP,EAAcQ,MAAK,qBAAGC,OAAoBJ,KAC7DE,GACHZ,EAAmBY,MAGnB,CAACP,EAAeR,EAAOI,IAE1B,IAAMc,EAAc,wBAAIC,UAAU,2CAAd,2BAEpB,OACC,yBAAKA,UAAWtC,IAAWuC,IAAOC,qBAAsB,8BACtDX,EACAQ,EACGV,EACH,yBACCW,UAAWtC,IAAWuC,IAAOE,gBAAiB,gEAE9C,yBAAKH,UAAU,6DACd,kBAAC,IAAD,CACCI,UAAWf,EACXgB,SAAUtB,EACVuB,SAAU,SAACC,GAAD,OAAavB,EAAmBuB,OAG5C,yBAAKP,UAAU,iCACd,kBAAC,IAAD,CAAqBQ,gBAAiBzB,EAAkBA,EAAgBe,KAAO,QAEhF,yBAAKE,UAAU,iCACd,kBAAC,IAAD,CAAmBQ,gBAAiBzB,EAAkBA,EAAgBe,KAAO,SAG5E,OAKQlB","file":"static/js/3.edd01235.chunk.js","sourcesContent":["import { useLocation } from 'react-router-dom';\n\nexport const useQuery = () => {\n\tconst { search } = useLocation();\n\treturn new URLSearchParams(search);\n};\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountryViewGrid\":\"styles_CountryViewGrid__BqUtC\"};","import React, { useState, useEffect } from 'react';\nimport useSWR from 'swr';\nimport classNames from 'classnames';\nimport { CountryPicker, MemoizedCountryInfo, CountryDailyChart } from '../../components';\nimport { useQuery } from '../../utils/custom-hooks';\nimport { getCountires } from '../../utils/api';\n\nimport styles from './styles.module.scss';\n\nexport const CountryView = () => {\n\tconst query = useQuery();\n\n\tconst [selectedCountry, setSelectedCountry] = useState(null);\n\tconst [requestedCountry, setRequestedCountry] = useState(null);\n\n\tconst { data: countriesList, error: countriesListError } = useSWR('countryLst', getCountires);\n\n\tuseEffect(() => {\n\t\tconst nextRequestedCountry = query.get('iso3');\n\t\tif (countriesList && requestedCountry !== nextRequestedCountry) {\n\t\t\tsetRequestedCountry(nextRequestedCountry);\n\n\t\t\tconst countryFromUrl = countriesList.find(({ iso3 }) => iso3 === nextRequestedCountry);\n\t\t\tif (countryFromUrl) {\n\t\t\t\tsetSelectedCountry(countryFromUrl);\n\t\t\t}\n\t\t}\n\t}, [countriesList, query, requestedCountry]);\n\n\tconst renderError = <h3 className=\"text-2xl text-error text-center my-auto\">Error loading countries</h3>;\n\n\treturn (\n\t\t<div className={classNames(styles.CountryViewContainer, 'flex-auto overflow-y-auto')}>\n\t\t\t{countriesListError ? (\n\t\t\t\trenderError\n\t\t\t) : countriesList ? (\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(styles.CountryViewGrid, 'grid grid-cols-1 lg:grid-cols-3 gap-6 min-h-full px-16 py-8')}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-3 justify-center items-center\">\n\t\t\t\t\t\t<CountryPicker\n\t\t\t\t\t\t\tcountries={countriesList}\n\t\t\t\t\t\t\tselected={selectedCountry}\n\t\t\t\t\t\t\tonSelect={(country) => setSelectedCountry(country)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-1\">\n\t\t\t\t\t\t<MemoizedCountryInfo countryIso3Code={selectedCountry ? selectedCountry.iso3 : null} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-2\">\n\t\t\t\t\t\t<CountryDailyChart countryIso3Code={selectedCountry ? selectedCountry.iso3 : null} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n\nexport default CountryView;\n"],"sourceRoot":""}