{"version":3,"sources":["utils/custom-hooks/use-query.js","pages/CountryView/styles.module.scss","pages/CountryView/index.jsx"],"names":["useQuery","search","useLocation","URLSearchParams","module","exports","CountryView","query","useState","selectedCountry","setSelectedCountry","requestedCountry","setRequestedCountry","useSWR","getCountires","countriesList","data","countriesListError","error","useEffect","nextRequestedCountry","get","countryFromUrl","find","iso3","renderError","className","classNames","styles","CountryViewContainer","CountryViewGrid","countries","selected","onSelect","country"],"mappings":"qNAEaA,EAAW,WAAO,IACtBC,EAAWC,cAAXD,OACR,OAAO,IAAIE,gBAAgBF,K,oBCH5BG,EAAOC,QAAU,CAAC,gBAAkB,kC,qLCQvBC,EAAc,WAC1B,IAAMC,EAAQP,cADkB,EAGcQ,mBAAS,MAHvB,mBAGzBC,EAHyB,KAGRC,EAHQ,OAIgBF,mBAAS,MAJzB,mBAIzBG,EAJyB,KAIPC,EAJO,OAM2BC,YAAO,aAAcC,KAAlEC,EANkB,EAMxBC,KAA4BC,EANJ,EAMHC,MAE7BC,qBAAU,WACT,IAAMC,EAAuBb,EAAMc,IAAI,QACvC,GAAIN,GAAiBJ,IAAqBS,EAAsB,CAC/DR,EAAoBQ,GAEpB,IAAME,EAAiBP,EAAcQ,MAAK,qBAAGC,OAAoBJ,KAC7DE,GACHZ,EAAmBY,MAGnB,CAACP,EAAeR,EAAOI,IAE1B,IAAMc,EAAc,wBAAIC,UAAU,2CAAd,2BAEpB,OACC,yBAAKA,UAAWC,IAAWC,IAAOC,qBAAsB,8BACtDZ,EACAQ,EACGV,EACH,yBAAKW,UAAWC,IAAWC,IAAOE,gBAAiB,qDAClD,yBAAKJ,UAAU,6DACd,kBAAC,IAAD,CACCK,UAAWhB,EACXiB,SAAUvB,EACVwB,SAAU,SAACC,GAAD,OAAaxB,EAAmBwB,OAG5C,yBAAKR,UAAU,iCACd,kBAAC,IAAD,CAAaM,SAAUvB,KAExB,yBAAKiB,UAAU,iCACd,kBAAC,IAAD,CAAmBM,SAAUvB,MAG5B,OAKQH","file":"static/js/3.102618c5.chunk.js","sourcesContent":["import { useLocation } from 'react-router-dom';\n\nexport const useQuery = () => {\n\tconst { search } = useLocation();\n\treturn new URLSearchParams(search);\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountryViewGrid\":\"styles_CountryViewGrid__BqUtC\"};","import React, { useState, useEffect } from 'react';\nimport useSWR from 'swr';\nimport classNames from 'classnames';\nimport { CountryPicker, CountryInfo, CountryDailyChart } from '../../components';\nimport { useQuery } from '../../utils/custom-hooks';\nimport { getCountires } from '../../utils/api';\n\nimport styles from './styles.module.scss';\n\nexport const CountryView = () => {\n\tconst query = useQuery();\n\n\tconst [selectedCountry, setSelectedCountry] = useState(null);\n\tconst [requestedCountry, setRequestedCountry] = useState(null);\n\n\tconst { data: countriesList, error: countriesListError } = useSWR('countryLst', getCountires);\n\n\tuseEffect(() => {\n\t\tconst nextRequestedCountry = query.get('iso3');\n\t\tif (countriesList && requestedCountry !== nextRequestedCountry) {\n\t\t\tsetRequestedCountry(nextRequestedCountry);\n\n\t\t\tconst countryFromUrl = countriesList.find(({ iso3 }) => iso3 === nextRequestedCountry);\n\t\t\tif (countryFromUrl) {\n\t\t\t\tsetSelectedCountry(countryFromUrl);\n\t\t\t}\n\t\t}\n\t}, [countriesList, query, requestedCountry]);\n\n\tconst renderError = <h3 className=\"text-2xl text-error text-center my-auto\">Error loading countries</h3>;\n\n\treturn (\n\t\t<div className={classNames(styles.CountryViewContainer, 'flex-auto overflow-y-auto')}>\n\t\t\t{countriesListError ? (\n\t\t\t\trenderError\n\t\t\t) : countriesList ? (\n\t\t\t\t<div className={classNames(styles.CountryViewGrid, 'grid grid-cols-1 lg:grid-cols-3 gap-6 px-16 py-8')}>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-3 justify-center items-center\">\n\t\t\t\t\t\t<CountryPicker\n\t\t\t\t\t\t\tcountries={countriesList}\n\t\t\t\t\t\t\tselected={selectedCountry}\n\t\t\t\t\t\t\tonSelect={(country) => setSelectedCountry(country)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-1\">\n\t\t\t\t\t\t<CountryInfo selected={selectedCountry} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-2\">\n\t\t\t\t\t\t<CountryDailyChart selected={selectedCountry} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n\nexport default CountryView;\n"],"sourceRoot":""}