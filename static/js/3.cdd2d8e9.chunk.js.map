{"version":3,"sources":["utils/custom-hooks/use-query.js","pages/CountryView/styles.module.scss","pages/CountryView/index.jsx"],"names":["useQuery","search","useLocation","URLSearchParams","module","exports","CountryView","query","useState","selectedCountry","setSelectedCountry","requestedCountry","setRequestedCountry","userSWR","getCountires","data","error","useEffect","nextRequestedCountry","get","countryFromUrl","countries","find","iso3","renderError","className","classNames","styles","CountryViewContainer","CountryViewGrid","selected","onSelect","country"],"mappings":"oNAEaA,EAAW,WAAO,IACtBC,EAAWC,cAAXD,OACR,OAAO,IAAIE,gBAAgBF,K,oBCH5BG,EAAOC,QAAU,CAAC,gBAAkB,kC,oLCQvBC,EAAc,WAC1B,IAAMC,EAAQP,cADkB,EAGcQ,mBAAS,MAHvB,mBAGzBC,EAHyB,KAGRC,EAHQ,OAIgBF,mBAAS,MAJzB,mBAIzBG,EAJyB,KAIPC,EAJO,OAMRC,YAAQ,gBAAiBC,KAAzCC,EANwB,EAMxBA,KAAMC,EANkB,EAMlBA,MAEdC,qBAAU,WACT,IAAMC,EAAuBX,EAAMY,IAAI,QACvC,GAAIJ,GAAQJ,IAAqBO,EAAsB,CACtDN,EAAoBM,GAEpB,IAAME,EAAiBL,EAAKM,UAAUC,MAAK,qBAAGC,OAAoBL,KAC9DE,GACHV,EAAmBU,MAGnB,CAACL,EAAMR,EAAOI,IAEjB,IAAMa,EAAc,wBAAIC,UAAU,2CAAd,2BAEpB,OACC,yBAAKA,UAAWC,IAAWC,IAAOC,qBAAsB,yCACtDZ,EACAQ,EACGT,EACH,yBAAKU,UAAWC,IAAWC,IAAOE,gBAAiB,iDAClD,yBAAKJ,UAAU,6DACd,kBAAC,IAAD,CACCJ,UAAWN,EAAKM,UAChBS,SAAUrB,EACVsB,SAAU,SAACC,GAAD,OAAatB,EAAmBsB,OAG5C,yBAAKP,UAAU,mBACd,kBAAC,IAAD,CAAaK,SAAUrB,KAExB,yBAAKgB,UAAU,kCAEb,OAKQnB","file":"static/js/3.cdd2d8e9.chunk.js","sourcesContent":["import { useLocation } from 'react-router-dom';\n\nexport const useQuery = () => {\n\tconst { search } = useLocation();\n\treturn new URLSearchParams(search);\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountryViewGrid\":\"styles_CountryViewGrid__BqUtC\"};","import React, { useState, useEffect } from 'react';\nimport userSWR from 'swr';\nimport classNames from 'classnames';\nimport { CountryPicker, CountryInfo } from '../../components';\nimport { useQuery } from '../../utils/custom-hooks';\nimport { getCountires } from '../../utils/api';\n\nimport styles from './styles.module.scss';\n\nexport const CountryView = () => {\n\tconst query = useQuery();\n\n\tconst [selectedCountry, setSelectedCountry] = useState(null);\n\tconst [requestedCountry, setRequestedCountry] = useState(null);\n\n\tconst { data, error } = userSWR('api/countries', getCountires);\n\n\tuseEffect(() => {\n\t\tconst nextRequestedCountry = query.get('iso3');\n\t\tif (data && requestedCountry !== nextRequestedCountry) {\n\t\t\tsetRequestedCountry(nextRequestedCountry);\n\n\t\t\tconst countryFromUrl = data.countries.find(({ iso3 }) => iso3 === nextRequestedCountry);\n\t\t\tif (countryFromUrl) {\n\t\t\t\tsetSelectedCountry(countryFromUrl);\n\t\t\t}\n\t\t}\n\t}, [data, query, requestedCountry]);\n\n\tconst renderError = <h3 className=\"text-2xl text-error text-center my-auto\">Error loading countries</h3>;\n\n\treturn (\n\t\t<div className={classNames(styles.CountryViewContainer, 'flex-auto overflow-y-auto px-16 py-8')}>\n\t\t\t{error ? (\n\t\t\t\trenderError\n\t\t\t) : data ? (\n\t\t\t\t<div className={classNames(styles.CountryViewGrid, 'grid grid-cols-1 lg:grid-cols-2 h-full gap-8')}>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-2 justify-center items-center\">\n\t\t\t\t\t\t<CountryPicker\n\t\t\t\t\t\t\tcountries={data.countries}\n\t\t\t\t\t\t\tselected={selectedCountry}\n\t\t\t\t\t\t\tonSelect={(country) => setSelectedCountry(country)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1\">\n\t\t\t\t\t\t<CountryInfo selected={selectedCountry} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1 bg-secondary\"></div>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n\nexport default CountryView;\n"],"sourceRoot":""}