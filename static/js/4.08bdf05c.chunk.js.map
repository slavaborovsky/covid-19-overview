{"version":3,"sources":["utils/custom-hooks/use-top-countries.js","utils/custom-hooks/use-query.js","pages/CountryView/styles.module.scss","pages/CountryView/index.jsx"],"names":["confirmedCasesComparer","getNumericComparer","accessor","data","cases","deathsCasesComparer","deaths","recoveredCasesComparer","recovered","INVALID_COUNTRIES","aggregateCountriesTopData","count","filteredCountriesData","reduce","out","c","includes","country","toLowerCase","iso2","iso3","countryName","countries","getName","getAlpha2Code","getAlpha3Code","lookup","coutryLookup","byCountry","byInternet","byFips","push","topConfirms","sort","slice","topDeaths","topRecovers","useTopCountries","useSWR","error","memoizedCountriesTopData","useMemo","updatedAt","Date","useQuery","search","useLocation","URLSearchParams","module","exports","CountryView","query","useState","selectedCountry","setSelectedCountry","userSWR","requestedCountry","get","useEffect","countryFromUrl","find","renderError","className","classNames","styles","CountryViewContainer","CountryViewGrid","selected","onSelect"],"mappings":"wQAOMA,EAAyBC,YAAmB,CAAEC,SAAU,SAACC,GAAD,OAAUA,EAAKC,SACvEC,EAAsBJ,YAAmB,CAAEC,SAAU,SAACC,GAAD,OAAUA,EAAKG,UACpEC,EAAyBN,YAAmB,CAAEC,SAAU,SAACC,GAAD,OAAUA,EAAKK,aAEvEC,EAAoB,CAAC,QAAS,QAAS,SAAU,SAAU,gBAAiB,gBAAiB,OAAQ,UAE3G,SAASC,EAA0BP,EAAMQ,GACxC,IAAKR,EACJ,OAAOA,EAGR,IAAMS,EAAwBT,EAAKU,QAAO,SAACC,EAAKC,GAC/C,GAAIN,EAAkBO,SAASD,EAAEE,QAAQC,eACxC,OAAOJ,EAGR,IAAIK,EAAO,KACPC,EAAO,KACLC,EAAcC,IAAUC,QAAQR,EAAEE,QAAS,MAEjD,GAAII,EACHF,EAAOG,IAAUE,cAAcH,EAAa,MAC5CD,EAAOE,IAAUG,cAAcJ,EAAa,UACtC,CACN,IAAMK,EACLC,IAAaC,UAAUb,EAAEE,UAAYU,IAAaE,WAAWd,EAAEE,UAAYU,IAAaG,OAAOf,EAAEE,SAC9FS,IACHP,EAAOO,EAAOP,KACdC,EAAOM,EAAON,MAQhB,OAJID,GAAQC,GACXN,EAAIiB,KAAJ,eAAchB,EAAd,CAAiBI,OAAMC,UAGjBN,IACL,IAMH,MAAO,CACNkB,YALmBpB,EAAsBqB,KAAKjC,GAAwBkC,MAAM,EAAGvB,GAM/EwB,UALiBvB,EAAsBqB,KAAK5B,GAAqB6B,MAAM,EAAGvB,GAM1EyB,YALmBxB,EAAsBqB,KAAK1B,GAAwB2B,MAAM,EAAGvB,IAS1E,IAAM0B,EAAkB,WAAgB,IAAf1B,EAAc,uDAAN,EAAM,EACrB2B,YAAO,aAAvBnC,EADqC,EACrCA,KAAMoC,EAD+B,EAC/BA,MAERC,EAA2BC,mBAAQ,kBAAM/B,EAA0BP,EAAMQ,KAAQ,CAACR,EAAMQ,IAE9F,MAAO,CACNR,KAAMqC,EACNE,UAAW,IAAIC,KACfJ,U,QC/DWK,EAAW,WAAO,IACtBC,EAAWC,cAAXD,OACR,OAAO,IAAIE,gBAAgBF,K,oBCH5BG,EAAOC,QAAU,CAAC,gBAAkB,kC,4KCOvBC,EAAc,WAC1B,IAAMC,EAAQP,cADkB,EAGcQ,mBAAS,MAHvB,mBAGzBC,EAHyB,KAGRC,EAHQ,OAKRC,YAAQ,iBAAxBpD,EALwB,EAKxBA,KAAMoC,EALkB,EAKlBA,MAERiB,EAAmBL,EAAMM,IAAI,QAEnCC,qBAAU,WACT,GAAIvD,GAAQqD,EAAkB,CAC7B,IAAMG,EAAiBxD,EAAKmB,UAAUsC,MAAK,qBAAGxC,OAAoBoC,KAC9DG,GACHL,EAAmBK,MAGnB,CAACxD,EAAMqD,IAEV,IAAMK,EAAc,wBAAIC,UAAU,2CAAd,2BAEpB,OACC,yBAAKA,UAAWC,IAAWC,IAAOC,qBAAsB,yCACtD1B,EACAsB,EACG1D,EACH,yBAAK2D,UAAWC,IAAWC,IAAOE,gBAAiB,iDAClD,yBAAKJ,UAAU,6DACd,kBAAC,IAAD,CACCxC,UAAWnB,EAAKmB,UAChB6C,SAAUd,EACVe,SAAU,SAACnD,GAAD,OAAaqC,EAAmBrC,OAG5C,yBAAK6C,UAAU,+BACf,yBAAKA,UAAU,kCAEb,OAKQZ","file":"static/js/4.08bdf05c.chunk.js","sourcesContent":["import { useMemo } from 'react';\nimport useSWR from 'swr';\nimport countries from 'i18n-iso-countries';\nimport coutryLookup from 'country-code-lookup';\n\nimport { getNumericComparer } from '../get-array-comparer';\n\nconst confirmedCasesComparer = getNumericComparer({ accessor: (data) => data.cases });\nconst deathsCasesComparer = getNumericComparer({ accessor: (data) => data.deaths });\nconst recoveredCasesComparer = getNumericComparer({ accessor: (data) => data.recovered });\n\nconst INVALID_COUNTRIES = ['world', 'total', 'total:', 'europe', 'north america', 'south america', 'asia', 'africa'];\n\nfunction aggregateCountriesTopData(data, count) {\n\tif (!data) {\n\t\treturn data;\n\t}\n\n\tconst filteredCountriesData = data.reduce((out, c) => {\n\t\tif (INVALID_COUNTRIES.includes(c.country.toLowerCase())) {\n\t\t\treturn out;\n\t\t}\n\n\t\tlet iso2 = null;\n\t\tlet iso3 = null;\n\t\tconst countryName = countries.getName(c.country, 'en');\n\n\t\tif (countryName) {\n\t\t\tiso2 = countries.getAlpha2Code(countryName, 'en');\n\t\t\tiso3 = countries.getAlpha3Code(countryName, 'en');\n\t\t} else {\n\t\t\tconst lookup =\n\t\t\t\tcoutryLookup.byCountry(c.country) || coutryLookup.byInternet(c.country) || coutryLookup.byFips(c.country);\n\t\t\tif (lookup) {\n\t\t\t\tiso2 = lookup.iso2;\n\t\t\t\tiso3 = lookup.iso3;\n\t\t\t}\n\t\t}\n\n\t\tif (iso2 && iso3) {\n\t\t\tout.push({ ...c, iso2, iso3 });\n\t\t}\n\n\t\treturn out;\n\t}, []);\n\n\tconst topConfirms = filteredCountriesData.sort(confirmedCasesComparer).slice(0, count);\n\tconst topDeaths = filteredCountriesData.sort(deathsCasesComparer).slice(0, count);\n\tconst topRecovers = filteredCountriesData.sort(recoveredCasesComparer).slice(0, count);\n\n\treturn {\n\t\ttopConfirms,\n\t\ttopDeaths,\n\t\ttopRecovers,\n\t};\n}\n\nexport const useTopCountries = (count = 5) => {\n\tconst { data, error } = useSWR('countries');\n\n\tconst memoizedCountriesTopData = useMemo(() => aggregateCountriesTopData(data, count), [data, count]);\n\n\treturn {\n\t\tdata: memoizedCountriesTopData,\n\t\tupdatedAt: new Date(),\n\t\terror,\n\t};\n};\n","import { useLocation } from 'react-router-dom';\n\nexport const useQuery = () => {\n\tconst { search } = useLocation();\n\treturn new URLSearchParams(search);\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountryViewGrid\":\"styles_CountryViewGrid__BqUtC\"};","import React, { useState, useEffect } from 'react';\nimport userSWR from 'swr';\nimport classNames from 'classnames';\nimport { CountryPicker } from '../../components';\nimport { useQuery } from '../../utils/custom-hooks';\n\nimport styles from './styles.module.scss';\n\nexport const CountryView = () => {\n\tconst query = useQuery();\n\n\tconst [selectedCountry, setSelectedCountry] = useState(null);\n\n\tconst { data, error } = userSWR('api/countries');\n\n\tconst requestedCountry = query.get('iso3');\n\n\tuseEffect(() => {\n\t\tif (data && requestedCountry) {\n\t\t\tconst countryFromUrl = data.countries.find(({ iso3 }) => iso3 === requestedCountry);\n\t\t\tif (countryFromUrl) {\n\t\t\t\tsetSelectedCountry(countryFromUrl);\n\t\t\t}\n\t\t}\n\t}, [data, requestedCountry]);\n\n\tconst renderError = <h3 className=\"text-2xl text-error text-center my-auto\">Error loading countries</h3>;\n\n\treturn (\n\t\t<div className={classNames(styles.CountryViewContainer, 'flex-auto overflow-y-auto px-16 py-8')}>\n\t\t\t{error ? (\n\t\t\t\trenderError\n\t\t\t) : data ? (\n\t\t\t\t<div className={classNames(styles.CountryViewGrid, 'grid grid-cols-1 lg:grid-cols-2 h-full gap-6')}>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-2 justify-center items-center\">\n\t\t\t\t\t\t<CountryPicker\n\t\t\t\t\t\t\tcountries={data.countries}\n\t\t\t\t\t\t\tselected={selectedCountry}\n\t\t\t\t\t\t\tonSelect={(country) => setSelectedCountry(country)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1 bg-primary\"></div>\n\t\t\t\t\t<div className=\"grid col-span-1 bg-secondary\"></div>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n\nexport default CountryView;\n"],"sourceRoot":""}