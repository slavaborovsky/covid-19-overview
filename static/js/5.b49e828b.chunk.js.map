{"version":3,"sources":["utils/custom-hooks/use-top-countries.js","utils/custom-hooks/use-query.js","pages/GlobalDashboard/index.jsx"],"names":["confirmedCasesComparer","getNumericComparer","accessor","data","cases","deathsCasesComparer","deaths","recoveredCasesComparer","recovered","INVALID_COUNTRIES","aggregateCountriesTopData","count","filteredCountriesData","reduce","out","c","includes","country","toLowerCase","iso2","iso3","countryName","countries","getName","getAlpha2Code","getAlpha3Code","lookup","coutryLookup","byCountry","byInternet","byFips","push","topConfirms","sort","slice","topDeaths","topRecovers","useTopCountries","useSWR","error","memoizedCountriesTopData","useMemo","updatedAt","Date","useQuery","search","useLocation","URLSearchParams","TotalsDashboard","totalsData","totalsError","countriesData","countriesError","globalDataError","className","renderLastUpdateAt","toLocaleTimeString","toLocaleDateString","renderTopListError","countryLink","to","classNames","styles","TotalsDashboardContainer","TotalsDashboardGrid","header","renderCount","Fragment","start","end","duration","separator","renderList","map","key","toLocaleString","todayCases","todayDeaths","critical"],"mappings":"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","file":"static/js/5.b49e828b.chunk.js","sourcesContent":["import { useMemo } from 'react';\nimport useSWR from 'swr';\nimport countries from 'i18n-iso-countries';\nimport coutryLookup from 'country-code-lookup';\n\nimport { getNumericComparer } from '../get-array-comparer';\n\nconst confirmedCasesComparer = getNumericComparer({ accessor: (data) => data.cases });\nconst deathsCasesComparer = getNumericComparer({ accessor: (data) => data.deaths });\nconst recoveredCasesComparer = getNumericComparer({ accessor: (data) => data.recovered });\n\nconst INVALID_COUNTRIES = ['world', 'total', 'total:', 'europe', 'north america', 'south america', 'asia', 'africa'];\n\nfunction aggregateCountriesTopData(data, count) {\n\tif (!data) {\n\t\treturn data;\n\t}\n\n\tconst filteredCountriesData = data.reduce((out, c) => {\n\t\tif (INVALID_COUNTRIES.includes(c.country.toLowerCase())) {\n\t\t\treturn out;\n\t\t}\n\n\t\tlet iso2 = null;\n\t\tlet iso3 = null;\n\t\tconst countryName = countries.getName(c.country, 'en');\n\n\t\tif (countryName) {\n\t\t\tiso2 = countries.getAlpha2Code(countryName, 'en');\n\t\t\tiso3 = countries.getAlpha3Code(countryName, 'en');\n\t\t} else {\n\t\t\tconst lookup =\n\t\t\t\tcoutryLookup.byCountry(c.country) || coutryLookup.byInternet(c.country) || coutryLookup.byFips(c.country);\n\t\t\tif (lookup) {\n\t\t\t\tiso2 = lookup.iso2;\n\t\t\t\tiso3 = lookup.iso3;\n\t\t\t}\n\t\t}\n\n\t\tif (iso2 && iso3) {\n\t\t\tout.push({ ...c, iso2, iso3 });\n\t\t}\n\n\t\treturn out;\n\t}, []);\n\n\tconst topConfirms = filteredCountriesData.sort(confirmedCasesComparer).slice(0, count);\n\tconst topDeaths = filteredCountriesData.sort(deathsCasesComparer).slice(0, count);\n\tconst topRecovers = filteredCountriesData.sort(recoveredCasesComparer).slice(0, count);\n\n\treturn {\n\t\ttopConfirms,\n\t\ttopDeaths,\n\t\ttopRecovers,\n\t};\n}\n\nexport const useTopCountries = (count = 5) => {\n\tconst { data, error } = useSWR('countries');\n\n\tconst memoizedCountriesTopData = useMemo(() => aggregateCountriesTopData(data, count), [data, count]);\n\n\treturn {\n\t\tdata: memoizedCountriesTopData,\n\t\tupdatedAt: new Date(),\n\t\terror,\n\t};\n};\n","import { useLocation } from 'react-router-dom';\n\nexport const useQuery = () => {\n\tconst { search } = useLocation();\n\treturn new URLSearchParams(search);\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport CountUp from 'react-countup';\nimport classNames from 'classnames';\nimport useSWR from 'swr';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nimport { Card } from '../../components';\nimport { useTopCountries } from '../../utils/custom-hooks';\n\nimport styles from './styles.module.scss';\n\nconst TotalsDashboard = () => {\n\tconst { data: totalsData, error: totalsError } = useSWR('all');\n\tconst { data: countriesData, updatedAt, error: countriesError } = useTopCountries(10);\n\n\tconst globalDataError = <p className=\"text-error text-2xl\">Global data error!</p>;\n\n\tconst renderLastUpdateAt = (\n\t\t<p className=\"text-sm opacity-60 text-default mb-4\">\n\t\t\tLast update: {updatedAt.toLocaleTimeString()} {updatedAt.toLocaleDateString()}\n\t\t</p>\n\t);\n\n\tconst renderGlobalConfirmedCases = () => {\n\t\tif (totalsError) {\n\t\t\treturn globalDataError;\n\t\t}\n\n\t\tif (totalsData && totalsData.cases) {\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<p className=\"text-warning text-2xl\">\n\t\t\t\t\t\t<CountUp start={0} end={totalsData.cases} duration={1} separator=\",\" />\n\t\t\t\t\t</p>\n\t\t\t\t\t{renderLastUpdateAt}\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t}\n\n\t\treturn <p className=\"text-base text-on-card\">Loading cases...</p>;\n\t};\n\n\tconst renderGlobalDeathsCases = () => {\n\t\tif (totalsError) {\n\t\t\treturn globalDataError;\n\t\t}\n\n\t\tif (totalsData && totalsData.deaths) {\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<p className=\"text-error text-2xl\">\n\t\t\t\t\t\t<CountUp start={0} end={totalsData.deaths} duration={1} separator=\",\" />\n\t\t\t\t\t</p>\n\t\t\t\t\t{renderLastUpdateAt}\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t}\n\n\t\treturn <p className=\"text-base text-on-card\">Loading deaths...</p>;\n\t};\n\n\tconst renderGlobalRecoveredCases = () => {\n\t\tif (totalsError) {\n\t\t\treturn globalDataError;\n\t\t}\n\n\t\tif (totalsData && totalsData.recovered) {\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<p className=\"text-success text-2xl\">\n\t\t\t\t\t\t<CountUp start={0} end={totalsData.recovered} duration={1} separator=\",\" />\n\t\t\t\t\t</p>\n\t\t\t\t\t{renderLastUpdateAt}\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t}\n\n\t\treturn <p className=\"text-base text-on-card\">Loading recovers...</p>;\n\t};\n\n\tconst renderTopListError = <p className=\"text-error text-base\">Top data list error!</p>;\n\n\tconst countryLink = ({ country, iso3 }) => {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\tto={`/countries?iso3=${iso3}`}\n\t\t\t\tclassName=\"text-2xl text-default cursor-pointer hover:underline hover:font-semibold\"\n\t\t\t>\n\t\t\t\t{country}\n\t\t\t</Link>\n\t\t);\n\t};\n\n\tconst renderTopFiveConfirmedCountries = () => {\n\t\tif (countriesError) {\n\t\t\treturn renderTopListError;\n\t\t}\n\n\t\tif (countriesData && countriesData.topConfirms) {\n\t\t\treturn (\n\t\t\t\t<List>\n\t\t\t\t\t{countriesData.topConfirms.map((data) => (\n\t\t\t\t\t\t<ListItem className=\"border shadow-inner border-primary-300 px-4 py-2 flex flex-col\" key={data.country}>\n\t\t\t\t\t\t\t{countryLink(data)}\n\t\t\t\t\t\t\t<p className=\"text-center\">\n\t\t\t\t\t\t\t\t<span className=\"text-base text-warning whitespace-no-wrap\">\n\t\t\t\t\t\t\t\t\tInfected: {data.cases.toLocaleString()}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className=\"mx-2 text-default\">|</span>\n\t\t\t\t\t\t\t\t<span className=\"text-base text-warning whitespace-no-wrap\">Today: {data.todayCases}</span>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t))}\n\t\t\t\t</List>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tconst renderTopFiveDeathsCountries = () => {\n\t\tif (countriesError) {\n\t\t\treturn renderTopListError;\n\t\t}\n\n\t\tif (countriesData && countriesData.topDeaths) {\n\t\t\treturn (\n\t\t\t\t<List>\n\t\t\t\t\t{countriesData.topDeaths.map((data) => (\n\t\t\t\t\t\t<ListItem className=\"border shadow-inner border-primary-300 px-4 py-2 flex flex-col\" key={data.country}>\n\t\t\t\t\t\t\t{countryLink(data)}\n\t\t\t\t\t\t\t<p className=\"text-center\">\n\t\t\t\t\t\t\t\t<span className=\"text-base text-error whitespace-no-wrap\">Deaths: {data.deaths.toLocaleString()}</span>\n\t\t\t\t\t\t\t\t<span className=\"mx-2 text-default\">|</span>\n\t\t\t\t\t\t\t\t<span className=\"text-base text-error whitespace-no-wrap\">Today: {data.todayDeaths}</span>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t))}\n\t\t\t\t</List>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tconst renderTopFiveRecoversCountries = () => {\n\t\tif (countriesError) {\n\t\t\treturn renderTopListError;\n\t\t}\n\n\t\tif (countriesData && countriesData.topRecovers) {\n\t\t\treturn (\n\t\t\t\t<List>\n\t\t\t\t\t{countriesData.topRecovers.map((data) => (\n\t\t\t\t\t\t<ListItem className=\"border shadow-inner border-primary-300 px-4 py-2 flex flex-col\" key={data.country}>\n\t\t\t\t\t\t\t{countryLink(data)}\n\t\t\t\t\t\t\t<p className=\"text-center\">\n\t\t\t\t\t\t\t\t<span className=\"text-base text-success whitespace-no-wrap\">\n\t\t\t\t\t\t\t\t\tRecovered: {data.recovered.toLocaleString()}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className=\"mx-2 text-default\">|</span>\n\t\t\t\t\t\t\t\t<span className=\"text-base text-error whitespace-no-wrap\">Critical: {data.critical}</span>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t))}\n\t\t\t\t</List>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t};\n\n\treturn (\n\t\t<div className={classNames(styles.TotalsDashboardContainer, 'flex-auto overflow-y-auto px-16 py-12')}>\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\tstyles.TotalsDashboardGrid,\n\t\t\t\t\t'grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-12 xl:gap-16 text-center'\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<Card header=\"Infected\">\n\t\t\t\t\t{{\n\t\t\t\t\t\trenderCount: renderGlobalConfirmedCases,\n\t\t\t\t\t\trenderList: renderTopFiveConfirmedCountries,\n\t\t\t\t\t}}\n\t\t\t\t</Card>\n\n\t\t\t\t<Card header=\"Deaths\">\n\t\t\t\t\t{{\n\t\t\t\t\t\trenderCount: renderGlobalDeathsCases,\n\t\t\t\t\t\trenderList: renderTopFiveDeathsCountries,\n\t\t\t\t\t}}\n\t\t\t\t</Card>\n\n\t\t\t\t<Card header=\"Recovered\">\n\t\t\t\t\t{{\n\t\t\t\t\t\trenderCount: renderGlobalRecoveredCases,\n\t\t\t\t\t\trenderList: renderTopFiveRecoversCountries,\n\t\t\t\t\t}}\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TotalsDashboard;\n"],"sourceRoot":""}