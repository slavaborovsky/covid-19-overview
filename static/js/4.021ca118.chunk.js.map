{"version":3,"sources":["utils/custom-hooks/use-query.js","pages/CountryView/index.jsx"],"names":["useQuery","search","useLocation","URLSearchParams","CountryView","query","useState","selectedCountry","setSelectedCountry","requestedCountry","setRequestedCountry","useSWR","getInfectedCountries","countriesList","data","countriesListError","error","useEffect","nextRequestedCountry","get","countryFromUrl","find","iso3","renderError","className","countries","selected","onSelect","country","countryIso3Code"],"mappings":"qNAEaA,EAAW,WAAO,IACtBC,EAAWC,cAAXD,OACR,OAAO,IAAIE,gBAAgBF,K,iJCEfG,EAAc,WAC1B,IAAMC,EAAQL,cADkB,EAGcM,mBAAS,MAHvB,mBAGzBC,EAHyB,KAGRC,EAHQ,OAIgBF,mBAAS,MAJzB,mBAIzBG,EAJyB,KAIPC,EAJO,OAM2BC,YAAO,aAAcC,KAAlEC,EANkB,EAMxBC,KAA4BC,EANJ,EAMHC,MAE7BC,qBAAU,WACT,IAAMC,EAAuBb,EAAMc,IAAI,QACvC,GAAIN,GAAiBJ,IAAqBS,EAAsB,CAC/DR,EAAoBQ,GAEpB,IAAME,EAAiBP,EAAcQ,MAAK,qBAAGC,OAAoBJ,KAC7DE,GACHZ,EAAmBY,MAGnB,CAACP,EAAeR,EAAOI,IAE1B,IAAMc,EAAc,wBAAIC,UAAU,2CAAd,2BAEpB,OACC,yBAAKA,UAAU,6BACbT,EACAQ,EACGV,EACH,yBAAKW,UAAU,+DACd,yBAAKA,UAAU,6DACd,kBAAC,IAAD,CACCC,UAAWZ,EACXa,SAAUnB,EACVoB,SAAU,SAACC,GAAD,OAAapB,EAAmBoB,OAG5C,yBAAKJ,UAAU,iCACd,kBAAC,IAAD,CAAqBK,gBAAiBtB,EAAkBA,EAAgBe,KAAO,QAEhF,yBAAKE,UAAU,iCACd,kBAAC,IAAD,CAAmBK,gBAAiBtB,EAAkBA,EAAgBe,KAAO,SAG5E,OAKQlB","file":"static/js/4.021ca118.chunk.js","sourcesContent":["import { useLocation } from 'react-router-dom';\n\nexport const useQuery = () => {\n\tconst { search } = useLocation();\n\treturn new URLSearchParams(search);\n};\n","import React, { useState, useEffect } from 'react';\nimport useSWR from 'swr';\nimport { CountryPicker, MemoizedCountryInfo, CountryDailyChart } from '../../components';\nimport { useQuery } from '../../utils/custom-hooks';\nimport { getInfectedCountries } from '../../utils/api';\n\nexport const CountryView = () => {\n\tconst query = useQuery();\n\n\tconst [selectedCountry, setSelectedCountry] = useState(null);\n\tconst [requestedCountry, setRequestedCountry] = useState(null);\n\n\tconst { data: countriesList, error: countriesListError } = useSWR('countryLst', getInfectedCountries);\n\n\tuseEffect(() => {\n\t\tconst nextRequestedCountry = query.get('iso3');\n\t\tif (countriesList && requestedCountry !== nextRequestedCountry) {\n\t\t\tsetRequestedCountry(nextRequestedCountry);\n\n\t\t\tconst countryFromUrl = countriesList.find(({ iso3 }) => iso3 === nextRequestedCountry);\n\t\t\tif (countryFromUrl) {\n\t\t\t\tsetSelectedCountry(countryFromUrl);\n\t\t\t}\n\t\t}\n\t}, [countriesList, query, requestedCountry]);\n\n\tconst renderError = <h3 className=\"text-2xl text-error text-center my-auto\">Error loading countries</h3>;\n\n\treturn (\n\t\t<div className=\"flex-auto overflow-y-auto\">\n\t\t\t{countriesListError ? (\n\t\t\t\trenderError\n\t\t\t) : countriesList ? (\n\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 min-h-full px-16 py-8\">\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-3 justify-center items-center\">\n\t\t\t\t\t\t<CountryPicker\n\t\t\t\t\t\t\tcountries={countriesList}\n\t\t\t\t\t\t\tselected={selectedCountry}\n\t\t\t\t\t\t\tonSelect={(country) => setSelectedCountry(country)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-1\">\n\t\t\t\t\t\t<MemoizedCountryInfo countryIso3Code={selectedCountry ? selectedCountry.iso3 : null} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid col-span-1 lg:col-span-2\">\n\t\t\t\t\t\t<CountryDailyChart countryIso3Code={selectedCountry ? selectedCountry.iso3 : null} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n\nexport default CountryView;\n"],"sourceRoot":""}